#include "engine.h"

engine::engine(QObject *parent): QObject (parent){

    manager = new QNetworkAccessManager(this);

}

engine::~engine(){
    delete manager;
    manager = nullptr;
    delete saldoReply;
    saldoReply = nullptr;
}

void engine::makeRequest(){
      QString site_url="http://localhost:3000/tili/1";
      QString credentials="automaatti1:raha123";
      QNetworkRequest request((site_url));
      request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");
      QByteArray data = credentials.toLocal8Bit().toBase64();
      QString headerData = "Basic " + data;
      request.setRawHeader( "Authorization", headerData.toLocal8Bit());

      qDebug() << "signaali vastaanotettu enginessä";
      // QString saldo = "moi";

      manager = new QNetworkAccessManager(this);
      connect(manager, SIGNAL(finished (QNetworkReply*)),
              this, SLOT(saldoReplySlot(QNetworkReply*)));

      saldoReply = manager->get(request);


}

  void engine::saldoReplySlot(QNetworkReply *reply){
    QByteArray response_data=reply->readAll();
    qDebug() << response_data;
    QJsonDocument json_doc=QJsonDocument::fromJson(response_data);
    QJsonArray json_array=json_doc.array();
    QString saldo;
    foreach(const QJsonValue &value, json_array){
        QJsonObject json_obj=value.toObject();
        saldo+=QString::number((json_obj["idtili"].toInt()))+" " +
                json_obj["tilin_saldo"].toString(+"\r\n");
    }

    qDebug() << "lähetetään signaali exelle missä saldo on";
    emit saldoToExe(saldo);

}
